// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/security/privateca/v1/resources.proto

package com.google.cloud.security.privateca.v1;

/**
 * <pre>
 * Describes the way in which a [Certificate][google.cloud.security.privateca.v1.Certificate]'s [Subject][google.cloud.security.privateca.v1.Subject] and/or
 * [SubjectAltNames][google.cloud.security.privateca.v1.SubjectAltNames] will be resolved.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.security.privateca.v1.SubjectRequestMode}
 */
public enum SubjectRequestMode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Not specified.
   * </pre>
   *
   * <code>SUBJECT_REQUEST_MODE_UNSPECIFIED = 0;</code>
   */
  SUBJECT_REQUEST_MODE_UNSPECIFIED(0),
  /**
   * <pre>
   * The default mode used in most cases. Indicates that the certificate's
   * [Subject][google.cloud.security.privateca.v1.Subject] and/or [SubjectAltNames][google.cloud.security.privateca.v1.SubjectAltNames] are specified in the certificate
   * request. This mode requires the caller to have the
   * `privateca.certificates.create` permission.
   * </pre>
   *
   * <code>DEFAULT = 1;</code>
   */
  DEFAULT(1),
  /**
   * <pre>
   * A mode reserved for special cases. Indicates that the certificate should
   * have one or more SPIFFE [SubjectAltNames][google.cloud.security.privateca.v1.SubjectAltNames] set by the service based
   * on the caller's identity. This mode will ignore any explicitly specified
   * [Subject][google.cloud.security.privateca.v1.Subject] and/or [SubjectAltNames][google.cloud.security.privateca.v1.SubjectAltNames] in the certificate request.
   * This mode requires the caller to have the
   * `privateca.certificates.createForSelf` permission.
   * </pre>
   *
   * <code>REFLECTED_SPIFFE = 2;</code>
   */
  REFLECTED_SPIFFE(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Not specified.
   * </pre>
   *
   * <code>SUBJECT_REQUEST_MODE_UNSPECIFIED = 0;</code>
   */
  public static final int SUBJECT_REQUEST_MODE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * The default mode used in most cases. Indicates that the certificate's
   * [Subject][google.cloud.security.privateca.v1.Subject] and/or [SubjectAltNames][google.cloud.security.privateca.v1.SubjectAltNames] are specified in the certificate
   * request. This mode requires the caller to have the
   * `privateca.certificates.create` permission.
   * </pre>
   *
   * <code>DEFAULT = 1;</code>
   */
  public static final int DEFAULT_VALUE = 1;
  /**
   * <pre>
   * A mode reserved for special cases. Indicates that the certificate should
   * have one or more SPIFFE [SubjectAltNames][google.cloud.security.privateca.v1.SubjectAltNames] set by the service based
   * on the caller's identity. This mode will ignore any explicitly specified
   * [Subject][google.cloud.security.privateca.v1.Subject] and/or [SubjectAltNames][google.cloud.security.privateca.v1.SubjectAltNames] in the certificate request.
   * This mode requires the caller to have the
   * `privateca.certificates.createForSelf` permission.
   * </pre>
   *
   * <code>REFLECTED_SPIFFE = 2;</code>
   */
  public static final int REFLECTED_SPIFFE_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SubjectRequestMode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SubjectRequestMode forNumber(int value) {
    switch (value) {
      case 0: return SUBJECT_REQUEST_MODE_UNSPECIFIED;
      case 1: return DEFAULT;
      case 2: return REFLECTED_SPIFFE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SubjectRequestMode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SubjectRequestMode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SubjectRequestMode>() {
          public SubjectRequestMode findValueByNumber(int number) {
            return SubjectRequestMode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.cloud.security.privateca.v1.PrivateCaResourcesProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final SubjectRequestMode[] VALUES = values();

  public static SubjectRequestMode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SubjectRequestMode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.security.privateca.v1.SubjectRequestMode)
}

